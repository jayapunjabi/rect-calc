{"version":3,"sources":["components/Button.js","App.js","components/Input.js","components/ClearButton.js","serviceWorker.js","index.js"],"names":["Button","isOperator","val","isNaN","className","this","props","children","onClick","handleClick","Component","App","addToInput","setState","input","state","addDecimal","indexOf","addZeroToInput","clearInput","add","subtract","multiply","divide","evaluate","eval","previousNumber","currentNumber","operator","handleClear","Input","ClearButton","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f3d66060.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Button.css\";\r\n\r\nclass Button extends Component {\r\n  isOperator = val => {\r\n    return !isNaN(val) || val === \".\" || val === \"=\";\r\n  };\r\n\r\n  render() {\r\n    return( \r\n      <div \r\n        className={`button ${this.isOperator(this.props.children) ? \"\" : \"operator\"}`}\r\n        onClick={() => this.props.handleClick(this.props.children)}\r\n      >\r\n        {this.props.children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Button;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Button from \"./components/Button\";\nimport Input from \"./components/Input\";\nimport ClearButton from \"./components/ClearButton\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      input: \"\",\n      previousNumber: \"\",\n      currentNumber: \"\",\n      operator: \"\"\n    };\n  }\n\n  addToInput = val => {\n    this.setState({ input: this.state.input + val });\n  };\n\n  addDecimal = val => {\n    // only add decimal if there is no current decimal point present in the input area\n    if (this.state.input.indexOf(\".\") === -1) {\n      this.setState({ input: this.state.input + val });\n    }\n  };\n\n  addZeroToInput = val => {\n    // if this.state.input is not empty then add zero\n    if (this.state.input !== \"\") {\n      this.setState({ input: this.state.input + val });\n    }\n  };\n\n  clearInput = () => {\n    this.setState({ input: \"\" });\n  };\n\n  add = () => {\n    this.setState({ input: this.state.input + \"+\" }); \n  };\n\n  subtract = () => {\n    this.setState({ input: this.state.input + \"-\" });\n  };\n  \n  multiply = () => {\n    this.setState({ input: this.state.input + \"*\" });\n  };\n\n  divide = () => {\n    this.setState({ input: this.state.input + \"/\" });\n  };\n\n  evaluate = () => {\n    this.setState({input: eval(this.state.input)});\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"calc-wrapper\">\n          <div className=\"row\">\n            <Input>{this.state.input}</Input>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>7</Button>\n            <Button handleClick={this.addToInput}>8</Button>\n            <Button handleClick={this.addToInput}>9</Button>\n            <Button handleClick={this.divide}>/</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>4</Button>\n            <Button handleClick={this.addToInput}>5</Button>\n            <Button handleClick={this.addToInput}>6</Button>\n            <Button handleClick={this.multiply}>*</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>1</Button>\n            <Button handleClick={this.addToInput}>2</Button>\n            <Button handleClick={this.addToInput}>3</Button>\n            <Button handleClick={this.add}>+</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addDecimal}>.</Button>\n            <Button handleClick={this.addZeroToInput}>0</Button>\n            <Button handleClick={this.evaluate}>=</Button>\n            <Button handleClick={this.subtract}>-</Button>\n          </div>\n          <div className=\"row\">\n            <ClearButton handleClear={this.clearInput}>Clear</ClearButton>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React, { Component } from \"react\";\r\nimport \"./Input.css\";\r\n\r\nclass Input extends Component {\r\n  render() {\r\n    return( \r\n      <div className=\"input\">\r\n        {this.props.children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Input;","import React, { Component } from \"react\";\r\nimport \"./ClearButton.css\";\r\n\r\nclass ClearButton extends Component {\r\n  render() {\r\n    return( \r\n      <div \r\n        className=\"clear-btn\"\r\n        onClick={() => this.props.handleClear()}\r\n      >\r\n        {this.props.children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ClearButton;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}